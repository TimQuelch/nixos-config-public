# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  boot.initrd.availableKernelModules =
    [ "nvme" "xhci_pci" "ahci" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ "nvidia" ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ config.boot.kernelPackages.nvidia_x11 ];

  boot.initrd.luks.devices."main".device =
    "/dev/disk/by-uuid/5e7aed93-c722-4c97-b222-64cf0128598f";

  fileSystems = (lib.mapAttrs (path: options: {
    device = "/dev/mapper/main";
    fsType = "btrfs";
    options = options;
  }) {
    "/" = [ "subvol=@root" "compress=zstd" ];
    "/nix" = [ "subvol=@nix" "compress=zstd" "noatime" ];
    "/home" = [ "subvol=@home" "compress=zstd" ];
    "/swap" = [ "subvol=@swap" "noatime" ];
  }) // {
    "/boot" = {
      device = "/dev/disk/by-uuid/B419-3ED0";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };
  };

  swapDevices = [{ device = "/swap/swapfile"; }];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp5s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp4s0.useDHCP = lib.mkDefault true;

  hardware.cpu.amd.updateMicrocode =
    lib.mkDefault config.hardware.enableRedistributableFirmware;

  virtualisation.docker.storageDriver = "btrfs";
}
